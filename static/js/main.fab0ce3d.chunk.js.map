{"version":3,"sources":["components/Field.js","components/Row.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Field","isTopRow","isBottomRow","isLeftColumn","isRightColumn","fieldStyle","css","borderTop","borderBottom","borderLeft","borderRight","width","height","className","rowStyle","display","justifyContent","Row","columns","map","fields","index","key","length","Board","grid","rows","ROW_ARR","Array","fill","COL_ARR","GRID","x","slice","appStyle","textAlign","App","state","cloneDeep","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NA+BeA,EAzBD,SAAC,GAKR,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,aACAC,EACI,EADJA,cAEMC,EAAaC,YAAI,CACrBC,UAAWN,EAAW,OAVG,kBAWzBO,aAAcN,EAAc,OAXH,kBAYzBO,WAAYN,EAAe,OAZF,kBAazBO,YAAaN,EAAgB,OAbJ,kBAczBO,MAbuB,QAcvBC,OAduB,UAiBzB,OACE,6BACE,yBACEC,UAAWR,MCpBbS,EAAWR,YAAI,CACnBS,QAAS,OACTC,eAAgB,WAuBHC,EApBH,SAAC,GAAD,IACVC,EADU,EACVA,QACAjB,EAFU,EAEVA,SACAC,EAHU,EAGVA,YAHU,OAKV,yBACEW,UAAWC,GAEVI,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CACEC,IAAKD,EACLpB,SAAUA,EACVC,YAAaA,EACbC,aAAwB,IAAVkB,EACdjB,cAAeiB,IAAUH,EAAQK,OAAS,SCHnCC,EAjBD,SAAC,GAER,IADLC,EACI,EADJA,KAEA,OACE,6BACGA,EAAKN,KAAI,SAACO,EAAML,GAAP,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLH,QAASQ,EACTzB,SAAoB,IAAVoB,EACVnB,YAAamB,IAAUI,EAAKF,OAAS,S,gBCNzCI,EAAU,IAAIC,MAFF,GAEmBC,KAAK,IACpCC,EAAU,IAAIF,MAFC,GAEmBC,KAAK,IACvCE,EAAOJ,EAAQR,KAAI,SAAAa,GAAC,OAAIF,EAAQG,WAEhCC,EAAW5B,YAAI,CACnB6B,UAAW,WAsBEC,E,4MAlBbC,MAAQ,CACNZ,KAAMa,IAAUP,I,uDAGR,IACAN,EAASc,KAAKF,MAAdZ,KAER,OACE,yBAAKZ,UAAWqB,GACd,2CACA,kBAAC,EAAD,CACET,KAAMA,S,GAZEe,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fab0ce3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { css } from 'emotion';\r\n\r\nconst DEFAULT_BORDER_STYLE = '1px solid black';\r\nconst DEFAULT_FIELD_SIZE = '100px';\r\n\r\nconst Field = ({\r\n  isTopRow,\r\n  isBottomRow,\r\n  isLeftColumn,\r\n  isRightColumn\r\n}) => {\r\n  const fieldStyle = css({\r\n    borderTop: isTopRow ? 'none' : DEFAULT_BORDER_STYLE ,\r\n    borderBottom: isBottomRow ? 'none' : DEFAULT_BORDER_STYLE,\r\n    borderLeft: isLeftColumn ? 'none' : DEFAULT_BORDER_STYLE,\r\n    borderRight: isRightColumn ? 'none' : DEFAULT_BORDER_STYLE,\r\n    width: DEFAULT_FIELD_SIZE,\r\n    height: DEFAULT_FIELD_SIZE\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={fieldStyle}\r\n      >\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from 'react';\r\nimport { css } from 'emotion';\r\nimport Field from './Field';\r\n\r\nconst rowStyle = css({\r\n  display: 'flex',\r\n  justifyContent: 'center'\r\n})\r\n\r\nconst Row = ({\r\n  columns,\r\n  isTopRow,\r\n  isBottomRow\r\n}) => (\r\n  <div\r\n    className={rowStyle}\r\n  >\r\n    {columns.map((fields, index) => (\r\n      <Field\r\n        key={index}\r\n        isTopRow={isTopRow}\r\n        isBottomRow={isBottomRow}\r\n        isLeftColumn={index === 0}\r\n        isRightColumn={index === columns.length - 1}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Row from '../components/Row';\r\n\r\nconst Board = ({\r\n  grid\r\n}) => {\r\n  return (\r\n    <div>\r\n      {grid.map((rows, index) => (\r\n        <Row\r\n          key={index}\r\n          columns={rows}\r\n          isTopRow={index === 0}\r\n          isBottomRow={index === grid.length - 1}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport { css } from 'emotion';\nimport Board from './components/Board';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst ROWS_SIZE = 3;\nconst COLUMNS_SIZE = 3;\nconst ROW_ARR = new Array(ROWS_SIZE).fill('');\nconst COL_ARR = new Array(COLUMNS_SIZE).fill('');\nconst GRID = ROW_ARR.map(x => COL_ARR.slice());\n\nconst appStyle = css({\n  textAlign: 'center',\n});\n\nclass App extends Component {\n  state = {\n    grid: cloneDeep(GRID)\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div className={appStyle}>\n        <h1>Tic-Tac-Toe</h1>\n        <Board\n          grid={grid} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}