{"version":3,"sources":["components/Field.js","components/Row.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Field","isTopRow","isBottomRow","isLeftColumn","isRightColumn","rowIndex","columnIndex","onClick","value","fieldStyle","css","alignItems","borderTop","borderBottom","borderLeft","borderRight","width","height","fontSize","DEFAULT_FIELD_SIZE","display","justifyContent","className","row","column","rowStyle","Row","columns","map","field","index","key","length","Board","grid","rows","ROW_ARR","Array","fill","COL_ARR","GRID","x","slice","appStyle","textAlign","titleStyle","marginBottom","App","state","cloneDeep","currentValue","emptyFields","ROWS_SIZE","isGameOver","winner","checkGameStatus","gameStatusInfo","handleClick","clonedGrid","newEmptyFieldsCounts","gameOver","nextValue","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd9a9fa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { css } from 'emotion';\r\n\r\nconst DEFAULT_BORDER_STYLE = '1px solid black';\r\nconst DEFAULT_FIELD_SIZE = 120;\r\n\r\nconst Field = ({\r\n  isTopRow,\r\n  isBottomRow,\r\n  isLeftColumn,\r\n  isRightColumn,\r\n  rowIndex,\r\n  columnIndex,\r\n  onClick,\r\n  value\r\n}) => {\r\n  const fieldStyle = css({\r\n    alignItems: 'center',\r\n    borderTop: isTopRow ? 'none' : DEFAULT_BORDER_STYLE ,\r\n    borderBottom: isBottomRow ? 'none' : DEFAULT_BORDER_STYLE,\r\n    borderLeft: isLeftColumn ? 'none' : DEFAULT_BORDER_STYLE,\r\n    borderRight: isRightColumn ? 'none' : DEFAULT_BORDER_STYLE,\r\n    width: DEFAULT_FIELD_SIZE,\r\n    height: DEFAULT_FIELD_SIZE,\r\n    fontSize: DEFAULT_FIELD_SIZE * 0.75,\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={fieldStyle}\r\n        onClick={() => {\r\n          if(!value && onClick){\r\n            onClick({row: rowIndex, column: columnIndex})\r\n          }\r\n        }}\r\n      >\r\n        {value}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from 'react';\r\nimport { css } from 'emotion';\r\nimport Field from './Field';\r\n\r\nconst rowStyle = css({\r\n  display: 'flex',\r\n  justifyContent: 'center'\r\n})\r\n\r\nconst Row = ({\r\n  columns,\r\n  isTopRow,\r\n  isBottomRow,\r\n  rowIndex,\r\n  onClick\r\n}) => (\r\n  <div\r\n    className={rowStyle}\r\n  >\r\n    {columns.map((field, index) => (\r\n      <Field\r\n        key={index}\r\n        isTopRow={isTopRow}\r\n        isBottomRow={isBottomRow}\r\n        isLeftColumn={index === 0}\r\n        isRightColumn={index === columns.length - 1}\r\n        rowIndex={rowIndex}\r\n        columnIndex={index}\r\n        onClick={onClick}\r\n        value={field}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Row from '../components/Row';\r\n\r\nconst Board = ({\r\n  grid,\r\n  onClick\r\n}) => {\r\n  return (\r\n    <div>\r\n      {grid.map((rows, index) => (\r\n        <Row\r\n          key={index}\r\n          columns={rows}\r\n          isTopRow={index === 0}\r\n          isBottomRow={index === grid.length - 1}\r\n          rowIndex={index}\r\n          onClick={onClick}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport { css } from 'emotion';\nimport Board from './components/Board';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst ROWS_SIZE = 3;\nconst COLUMNS_SIZE = 3;\nconst ROW_ARR = new Array(ROWS_SIZE).fill('');\nconst COL_ARR = new Array(COLUMNS_SIZE).fill('');\nconst GRID = ROW_ARR.map(x => COL_ARR.slice());\n\nconst appStyle = css({\n  textAlign: 'center'\n});\n\nconst titleStyle = css({\n  marginBottom: '50px'\n});\n\nclass App extends Component {\n  state = {\n    grid: cloneDeep(GRID),\n    currentValue: 'X',\n    emptyFields: ROWS_SIZE * COLUMNS_SIZE,\n    isGameOver: false,\n    winner: ''\n  }\n\n  checkGameStatus = ({ grid }) => {\n    if(grid[0][0] === grid[0][1] && grid[0][0] === grid[0][2] && grid[0][0] !== ''){\n      return true;\n    } // horizontally: top row\n    else if(grid[1][0] === grid[1][1] && grid[1][0] === grid[1][2] && grid[1][0] !== ''){\n      return true;\n    } // horizontally: middle row\n    else if(grid[2][0] === grid[2][1] && grid[2][0] === grid[2][2] && grid[2][0] !== ''){\n      return true;\n    } // horizontaly: bottom row\n\n    else if(grid[0][0] === grid[1][0] && grid[0][0] === grid[2][0] && grid[0][0] !== ''){\n      return true;\n    } // vertically: left column\n    else if(grid[0][1] === grid[1][1] && grid[0][1] === grid[2][1] && grid[0][1] !== ''){\n      return true;\n    } // vertically: middle column\n    else if(grid[0][2] === grid[1][2] && grid[0][2] === grid[2][2] && grid[0][2] !== ''){\n      return true;\n    } // vertically: right column\n\n    else if(grid[0][0] === grid[1][1] && grid[0][0] === grid[2][2] && grid[0][0] !== ''){\n      return true;\n    } // diagonally: top-left to bottom-right\n    else if(grid[0][2] === grid[1][1] && grid[0][2] === grid[2][0] && grid[0][2] !== ''){\n      return true;\n    } // diagonally: top-right to bottom-left\n\n    return false;\n  }\n\n  gameStatusInfo = () => {\n    const { isGameOver, winner, emptyFields } = this.state;\n    if(isGameOver && winner !== ''){\n      return (\n        <h4>{winner} IS A WINNER</h4>\n      );\n    }\n    else if(emptyFields === 0){\n      return (\n        <h4>IT'S A DRAW</h4>\n      );\n    }\n  }\n\n  handleClick = ({row, column}) => {\n    const { grid, currentValue, emptyFields } = this.state;\n\n    const clonedGrid = cloneDeep(grid); \n    const newEmptyFieldsCounts = emptyFields - 1;\n    clonedGrid[row][column] = currentValue;\n\n    const gameHasWinner = this.checkGameStatus({grid: clonedGrid});\n    let gameOver = false;\n    let winner = ''\n\n    if(gameHasWinner){\n      gameOver = true;\n      winner = currentValue;\n    }\n    else if(newEmptyFieldsCounts === 0){\n      gameOver = true;\n    }\n\n    const nextValue = currentValue === 'X' ? 'O' : 'X';\n\n    this.setState({\n      currentValue: nextValue,\n      grid: clonedGrid,\n      emptyFields: newEmptyFieldsCounts,\n      isGameOver: gameOver,\n      winner: winner\n    });\n  }\n\n  render() {\n    const { grid, isGameOver } = this.state;\n\n    return (\n      <div className={appStyle}>\n        <h1 className={titleStyle}>Tic-Tac-Toe</h1>\n        <Board\n          grid={grid}\n          onClick={isGameOver ? null : this.handleClick}\n        />\n        {this.gameStatusInfo()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}